
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  BASIC_USER
  COMPANY
  SUPER_ADMIN
}

model User {
  id            String   @id
  email         String   @unique
  name          String
  username      String?  @unique
  role          UserRole @default(BASIC_USER)
  emailVerified Boolean  @default(false)
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Company-specific fields
  companyName String?
  description String?
  location    String?
  telephone   String?

  // Authentication relationships
  Session Session[]
  Account Account[]

  // Business relationships
  products                Product[]
  comments                Comment[]
  ratings                 Rating[]
  companyProfile          CompanyProfile?
  givenCompanyComments    Comment[]       @relation("CompanyComments")
  givenCompanyRatings     Rating[]        @relation("CompanyRatings")
  receivedCompanyComments Comment[]       @relation("ReceivedCompanyComments")
  receivedCompanyRatings  Rating[]        @relation("ReceivedCompanyRatings")

  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@map("user")
}

model Session {
  id           String   @id
  sessionToken String   @unique
  expiresAt    DateTime
  ipAddress    String?
  userAgent    String?
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@map("session")
}

model Account {
  id                String    @id
  accountId         String
  providerId        String
  userId            String
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken       String?   @db.Text
  refreshToken      String?   @db.Text
  idToken           String?   @db.Text
  expiresAt         DateTime?
  password          String?
  type              String?
  provider          String?
  providerAccountId String?
  token_type        String?
  scope             String?
  session_state     String?

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  token      String?
  expires    DateTime

  expiresAt DateTime

  @@map("verification")
  @@unique([identifier, token])
}

model CompanyProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  companyId String
  company   User      @relation(fields: [companyId], references: [id])
  comments  Comment[]
  ratings   Rating[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  productId          String?
  product            Product? @relation(fields: [productId], references: [id])
  companyId          String?
  company            User?    @relation(name: "CompanyComments", fields: [companyId], references: [id])
  receivingCompany   User?    @relation(name: "ReceivedCompanyComments", fields: [receivingCompanyId], references: [id])
  receivingCompanyId String?
}

model Rating {
  id        String   @id @default(cuid())
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  productId          String?
  product            Product? @relation(fields: [productId], references: [id])
  companyId          String?
  company            User?    @relation(name: "CompanyRatings", fields: [companyId], references: [id])
  receivingCompany   User?    @relation(name: "ReceivedCompanyRatings", fields: [receivingCompanyId], references: [id])
  receivingCompanyId String?
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// model User {
//   id            String   @id
//   name          String
//   email         String
//   emailVerified Boolean
//   image         String?
//   createdAt     DateTime
//   updatedAt     DateTime

//   @@unique([email])
//   @@map("user")
// }

// model Session {
//   id        String   @id
//   expiresAt DateTime
//   ipAddress String?
//   userAgent String?
//   userId    String
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@map("session")
// }

// model Account {
//   id           String    @id
//   accountId    String
//   providerId   String
//   userId       String
//   user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   accessToken  String?
//   refreshToken String?
//   idToken      String?
//   expiresAt    DateTime?
//   password     String?

//   @@map("account")
// }

// model Verification {
//   id         String   @id
//   identifier String
//   value      String
//   expiresAt  DateTime

//   @@map("verification")
// }
