generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      String          @id
  email                   String          @unique
  name                    String
  username                String?         @unique
  role                    UserRole        @default(BASIC_USER)
  emailVerified           Boolean         @default(false)
  image                   String?
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  companyName             String?
  description             String?
  location                String?
  telephone               String?
  banExpires              DateTime?
  banReason               String?
  banned                  Boolean?
  givenCompanyComments    Comment[]       @relation("CompanyComments")
  receivedCompanyComments Comment[]       @relation("ReceivedCompanyComments")
  comments                Comment[]
  companyProfile          CompanyProfile?
  products                Product[]
  givenCompanyRatings     Rating[]        @relation("CompanyRatings")
  receivedCompanyRatings  Rating[]        @relation("ReceivedCompanyRatings")
  ratings                 Rating[]
  Account                 Account[]
  Session                 Session[]

  @@map("user")
}

model Session {
  id             String   @id
  sessionToken   String   @unique
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                String    @id
  accountId         String
  providerId        String
  userId            String
  accessToken       String?
  refreshToken      String?
  idToken           String?
  expiresAt         DateTime?
  password          String?
  type              String?
  provider          String?
  providerAccountId String?
  token_type        String?
  scope             String?
  session_state     String?
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  token      String?
  expires    DateTime
  expiresAt  DateTime

  @@unique([identifier, token])
  @@map("verification")
}

model CompanyProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Float
  imageUrl    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  companyId   String
  comments    Comment[]
  company     User      @relation(fields: [companyId], references: [id])
  ratings     Rating[]
}

model Comment {
  id                 String   @id @default(cuid())
  content            String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             String
  productId          String?
  companyId          String?
  receivingCompanyId String?
  company            User?    @relation("CompanyComments", fields: [companyId], references: [id])
  product            Product? @relation(fields: [productId], references: [id])
  receivingCompany   User?    @relation("ReceivedCompanyComments", fields: [receivingCompanyId], references: [id])
  user               User     @relation(fields: [userId], references: [id])
}

model Rating {
  id                 String   @id @default(cuid())
  score              Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             String
  productId          String?
  companyId          String?
  receivingCompanyId String?
  company            User?    @relation("CompanyRatings", fields: [companyId], references: [id])
  product            Product? @relation(fields: [productId], references: [id])
  receivingCompany   User?    @relation("ReceivedCompanyRatings", fields: [receivingCompanyId], references: [id])
  user               User     @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

enum UserRole {
  BASIC_USER
  COMPANY
  SUPER_ADMIN
}
