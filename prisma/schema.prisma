// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  BASIC_USER
  COMPANY
  SUPER_ADMIN
}
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?
  role          UserRole  @default(BASIC_USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Fields for basic users
  name          String?
  
  // Fields for companies
  companyName   String?
  description   String?
  location      String?
  telephone     String?
  
  // NextAuth fields
  // so i removed this out as i haven't started checking this
  // emailVerified DateTime?
  image         String?

  // Relationships
  products      Product[]
  comments      Comment[]
  ratings       Rating[]
  companyProfile CompanyProfile?
  givenCompanyComments Comment[] @relation("CompanyComments")
  givenCompanyRatings Rating[] @relation("CompanyRatings")
  receivedCompanyComments Comment[] @relation("ReceivedCompanyComments")
  receivedCompanyRatings Rating[] @relation("ReceivedCompanyRatings")
  
  // Authentication relationships
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
}

model CompanyProfile {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  description   String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Product {
  id            String    @id @default(cuid())
  name          String
  description   String
  price         Float
  imageUrl      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  companyId     String
  company       User      @relation(fields: [companyId], references: [id])
  comments      Comment[]
  ratings       Rating[]
}

model Comment {
  id            String    @id @default(cuid())
  content       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  productId     String?
  product       Product?  @relation(fields: [productId], references: [id])
  companyId     String?
  company       User?     @relation(name: "CompanyComments", fields: [companyId], references: [id])
  receivingCompany User?  @relation(name: "ReceivedCompanyComments", fields: [receivingCompanyId], references: [id])
  receivingCompanyId String?
}

model Rating {
  id            String    @id @default(cuid())
  score         Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  productId     String?
  product       Product?  @relation(fields: [productId], references: [id])
  companyId     String?
  company       User?     @relation(name: "CompanyRatings", fields: [companyId], references: [id])
  receivingCompany User?  @relation(name: "ReceivedCompanyRatings", fields: [receivingCompanyId], references: [id])
  receivingCompanyId String?
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}